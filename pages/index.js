import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Button, Input, Result, Table, Image, Select } from "antd";
import Test from "../components/test";
import { useEffect, useState } from "react";
import axios from "axios";
import Link from "next/link";
import { useRouter } from "next/router";
import Footer from "../components/Footer";

export async function getServerSideProps(context) {
  const page = context.query.page ? context.query.page : 1;
  const basicUrl = `https://randomuser.me/api/?page=${page}&results=10`;
  const nat = context.query.nat;
  const { data } = await axios({
    method: "GET",
    url: nat ? basicUrl + `&nat=${nat}` : basicUrl,
  });
  return { props: { data } };
}

export default function Home({ data }) {
  const [currentPage, setCurrentPage] = useState(1);
  const [nat, setNat] = useState("");
  const router = useRouter();

  const dataSource = [];

  data.results.forEach((el, i) => {
    const { name, email, location, picture, dob } = el;
    const obj = {
      key: i,
      name: `${name.title} ${name.first} ${name.last}`,
      email,
      kota: location.city,
      photo: <Image width={40} src={picture.thumbnail} />,
      dob: converter(dob.date),
    };
    dataSource.push(obj);
  });
  const { Option } = Select;
  const nationality = [
    "AU",
    "BR",
    "CA",
    "CH",
    "DE",
    "DK",
    "ES",
    "FI",
    "FR",
    "GB",
    "IE",
    "IR",
    "NO",
    "NL",
    "NZ",
    "TR",
    "US",
  ];
  const values = [];
  nationality.forEach((el) => {
    values.push(<Option value={el}>{el}</Option>);
  });
  const columns = [
    {
      title: "Nama",
      dataIndex: "name",
      key: "nama",
    },
    {
      title: "Email",
      dataIndex: "email",
      key: "email",
    },
    {
      title: "Kota",
      dataIndex: "kota",
      key: "kota",
    },
    {
      title: "Photo",
      dataIndex: "photo",
      key: "photo",
    },
    {
      title: "DOB",
      dataIndex: "dob",
      key: "dob",
    },
  ];

  function nextPage(e, where) {
    e.preventDefault();
    const newPage = where == "next" ? (currentPage += 1) : currentPage - +1;
    setCurrentPage(newPage);
  }

  function handleNatChange(value) {
    setNat(value);
  }
  function handleReset(e) {
    e.preventDefault();
    setCurrentPage(1);
    setNat("");
  }

  function converter(date) {
    const d = new Date(date),
      dformat =
        [d.getMonth() + 1, d.getDate(), d.getFullYear()].join("/") +
        " " +
        [d.getHours(), d.getMinutes(), d.getSeconds()].join(":");
    return dformat;
  }

  useEffect(() => {
    if (currentPage >= 0) {
      if (nat.length !== 0) {
        router.push(`/?page=${currentPage}&nat=${nat}`);
      } else if (nat.length == 0) {
        router.push(`/?page=${currentPage}`);
      }
    }
  }, [currentPage]);
  useEffect(() => {
    setCurrentPage(1);
    if (nat.length !== 0) {
      router.push(`/?page=${currentPage}&nat=${nat}`);
    } else {
      router.push(`/?page=${currentPage}`);
    }
  }, [nat]);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div
          style={{
            display: "flex",
            gap: 4,
            marginBottom: 10,
          }}
        >
          <Select
            style={{
              width: 120,
            }}
            onChange={(value) => handleNatChange(value)}
            placeholder="choose"
            value={nat}
          >
            <Option value="">select</Option>
            {values}
          </Select>
          <Button
            type="danger"
            onClick={(e) => {
              handleReset(e);
            }}
          >
            reset
          </Button>
        </div>
        {data.results ? (
          <Table dataSource={dataSource} columns={columns} pagination={false}/>
        ) : (
          <h1>loading</h1>
        )}
        <div className={styles.buttonContainer}>
          <Button
            type="primary"
            className={styles.myButton}
            onClick={(e) => {
              nextPage(e, "prev");
            }}
          >
            Prev
          </Button>
          <Button>{currentPage}</Button>
          <Button
            type="primary"
            className={styles.myButton}
            onClick={(e) => {
              nextPage(e, "next");
            }}
          >
            Next
          </Button>
        </div>
      </main>
      <Footer />
    </div>
  );
}
